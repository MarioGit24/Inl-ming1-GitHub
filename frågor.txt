Vad är pull repektive push?

git pull: använder man när man vill hämta och implementera från en remote 
-repository till din lokal repository, det vill säga du hämtar dem senaste uppdateringarna. 

git push: git push är lite tvärtom, det vill säga du skickar ändringar från din
lokala repository till din remote repositoty, användbart när man vill dela 
ändingar med andra utvecklare
  
När använder man log respektive status?

git log: Använder man när man vill se sin commit-historia i den aktuella grenen
och få en översikt om vem som gjort en tidigare ändring och vad dem har skapat för
meddelande om commiten/ändringen. 

git status: Används för att visa aktuell status på din arbetskatalog/working directory
och informerar om vilka filer som ändrats samt vilka filer som lagts till i staging area 
eller med andra ord blivit staged. används oftast innan en commit för att få info. 

Vad är en Git branch och varför är de viktiga?

Man har en huvudgren ofta kallad main eller master, och så har man en seperat utvecklingslinje 
såkallad gren bara. huvudgrenen representerar den färdiga eller stabila versionen av projektet 
medans vanliga grenar används för att jobba med nya funktioner och ändringar utan att påverka
 main projektet, detta skapar en möjlighet för parallellt arbete.

Det finns flera sätt att rulla tillbaka koden till ett tidigare tillstånd. 
Förklara skillnaden och motivera när man skulle använda den ena eller andra metoden.
Ge exempel på de kommandon du använder för att göra detta och vissa att det fungerar, 
vilken output du fick från git-kommandona.
Tips: Gör exemplen med att backa i en branch så att master fortfarande är korrekt

Svar: För att rulla tillbaka till ett tidigare tillstånd har vi dem vanligaste 

git reset --soft: Denna återställer till en viss commit utan att ändra i själva arbetskatalogen.
Denna är användbar om du tex råkade commita för snabbt och vill gå tillbaka för att redigera eller kombinera ändringar. 

output exempel: Head is now at ... 

git reset --mixed(standard versionen): Används när du tex vill backa en eller flera commits men ändå
behålla ändringar i arbetskatalogen, detta så du kan justera eller göra nya commitds baserade på dessa 
ndringar.Denna kan vara anvndbar om du tex endast vill ta bort en commit men ändå ha kvar ändringarna i arbetskatalogen. 

output exempel: Unstaged changes after reset:
path/to/modifiedfile  

git reset --hard HEAD~1 : Återställer en commit men tar bort alla ändringar i arbetskatalogen, bra om man 
vill återställa till ett tidigare tillstånd och ta bort alla förändringar därefter. Denna kan vara riskabel men bra om man tex vill ha en ren historik utan efterföljande ändringar. 

outputen blir tex : HEAD is now at ... 

git revert : är användbart om HEAD~1 innehåller en bygg som behöver fixas genom att helt enkelt backa ändringen. 

Output exempel:
 Reverting commit...
... Revert ... 
1 file changed, 2 insertions(+), 2 deletions(-). 

 

